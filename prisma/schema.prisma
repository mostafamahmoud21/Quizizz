generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instructor {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  role       Role  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  quizzes    Quiz[] // One instructor can create many quizzes
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quizAttempts QuizAttempt[] // One student can have many quiz attempts
}

enum Role {
  INSTRUCTOR
  STUDENT
}

model Quiz {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  instructorId Int
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  questions    Question[]      // A quiz can have many questions
  quizAttempts  QuizAttempt[]  // A quiz can be attempted multiple times
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String
  quizId    Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  choices   Choice[] // A question can have many choices
}

model Choice {
  id         Int      @id @default(autoincrement())
  text       String
 
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model QuizAttempt {
  id         Int      @id @default(autoincrement())
  quizId     Int
  studentId  Int
  score      Int
  dateTaken  DateTime @default(now())
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])
  
  @@unique([quizId, studentId]) // Composite unique constraint
}
